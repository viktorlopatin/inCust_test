from create_bot import bot, dp
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import reply_keyboars_list
from database import *
import datetime

#___–°–æ—Å—Ç—Ä–æ—è–Ω–∏–µ "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"___
class FSMCreateEvent(StatesGroup):
	nameEvent = State()
	title = State()
	description = State()
	media = State()
	endDate = State()

#–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
async def fsm_Create_Event_Start(message : types.Message):
	await FSMCreateEvent.nameEvent.set()
	await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è:", reply_markup=reply_keyboars_list["cencel_event"])

#–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def fsm_Name_Event(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["nameEvent"] = message.text

	await FSMCreateEvent.next()
	await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è\n(–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É):")

#–ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def fsm_title(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["title"] = message.text

	await FSMCreateEvent.next()
	await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n(–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É):")

#–ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def fsm_description(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["description"] = message.text

	await FSMCreateEvent.next()
	await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–¥–∏–∞\n(–ö–∞—Ä—Ç–∏–Ω–∫–∞, –ê–Ω–∏–º–∞—Ü–∏—è, –í–∏–¥–µ–æ, –ê—É–¥–∏–æ):")

#–ü–æ–ª—É—á–∞–µ–º 4 –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def fsm_media(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		
		if message.photo:
			data["media"] = ("photo", message.photo[-1].file_id)
		elif message.video:
			data["media"] = ("video", message.video.file_id)
		elif message.animation:
			data["media"] = ("animation", message.animation.file_id)
		elif message.audio:
			data["media"] = ("audio", message.audio.file_id)

	await FSMCreateEvent.next()
	await message.reply("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ d.m.y(–Ω–∞–ø—Ä–∏–º–µ—Ä 23.10.2021):")

#–ü–æ–ª—É—á–∞–µ–º 5 –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def fsm_endDate(message: types.Message, state: FSMContext):

	try:
		datetime.datetime.strptime(message.text, "%d.%m.%Y")
	except Exception as e:
		print(e)
		await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ d.m.y\n(–Ω–∞–ø—Ä–∏–º–µ—Ä 23.10.2021):")
		return

	async with state.proxy() as data:
		data["endDate"] = message.text

	await db.addEvent(Event(message.chat.id, data["nameEvent"], data["title"], data["description"], data["media"][0], data["media"][1], data["endDate"]))

	text = data["title"] + "\n\n" + data["description"] + "\n\n–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µüëÜüëÜüëÜ\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤  @seervice_000_bot –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start."
	if data["media"][0] == "photo": 
		await bot.send_photo(chat_id = message.chat.id, photo = data["media"][1], caption = text, reply_markup=reply_keyboars_list["start"])	
	elif data["media"][0] == "video": 
		await bot.send_video(chat_id = message.chat.id, video = data["media"][1], caption = text, reply_markup=reply_keyboars_list["start"])	
	elif data["media"][0] == "animation": 
		await bot.send_animation(chat_id = message.chat.id, animation = data["media"][1], caption = text, reply_markup=reply_keyboars_list["start"])	
	elif data["media"][0] == "audio": 
		await bot.send_audio(chat_id = message.chat.id, audio = data["media"][1], caption = text, reply_markup=reply_keyboars_list["start"])	

	await state.finish()

#–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
async def cancel_handler(message: types.Message, state: FSMContext) :
	current_state = await state.get_state()
	if current_state is None:
		await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=reply_keyboars_list["start"])
		return
		
	await state.finish()
	await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=reply_keyboars_list["start"])

#___end___

def FSM_create_event_register_handlers(dp: Dispatcher):
	dp.register_message_handler(cancel_handler, filters.Text(equals="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", ignore_case=True), state="*")
	dp.register_message_handler(fsm_Create_Event_Start, filters.Text(contains=["–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"], ignore_case=True), state=None)
	dp.register_message_handler(fsm_Name_Event, state=FSMCreateEvent.nameEvent)
	dp.register_message_handler(fsm_title, state=FSMCreateEvent.title)
	dp.register_message_handler(fsm_description, state=FSMCreateEvent.description)
	dp.register_message_handler(fsm_media, content_types=["photo", "video", "audio", "animation"], state=FSMCreateEvent.media)
	dp.register_message_handler(fsm_endDate, state=FSMCreateEvent.endDate)